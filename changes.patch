diff -ruaN unzip/Optimized_Implementation/include/csprng_hash.h tmp/Optimized_Implementation/include/csprng_hash.h
--- unzip/Optimized_Implementation/include/csprng_hash.h	2025-03-15 11:38:28.743967889 +0100
+++ tmp/Optimized_Implementation/include/csprng_hash.h	2025-03-15 11:38:05.715569475 +0100
@@ -34,6 +34,7 @@
 #ifndef CSPRNG_HASH_H
 #define CSPRNG_HASH_H
 
+#include "crypto_declassify.h"
 #include "parameters.h"
 #include "sha3.h"
 
@@ -180,17 +181,6 @@
    else if(par_level == 4) csprng_randombytes_x4(x1, x2, x3, x4, xlen, &(states->state4));
 }
 
-/******************************************************************************/
-
-/* global csprng state employed to have deterministic randombytes for testing */
-extern CSPRNG_STATE_T platform_csprng_state;
-/* extracts xlen bytes from the global CSPRNG */
-static inline
-void randombytes(unsigned char * x,
-                 unsigned long long xlen) {
-   csprng_randombytes(x,xlen,&platform_csprng_state);
-}
-
 /************************* HASH functions ********************************/
 
 /* Opaque algorithm agnostic hash call */
@@ -277,6 +267,10 @@
             pos_remaining -= refresh_amount;
         }
         res[placed] = sub_buffer & mask;
+
+        /* SUPERCOP edit: tell TIMECOP to ignore non-constant-time behavior in rejection sampling. */
+        crypto_declassify(&res[placed], sizeof(FP_ELEM));
+
         if (res[placed] < P) {
            placed++;
         }
@@ -322,6 +316,10 @@
         }
         /* draw from 0 ... P-2, then add 1*/
         res[placed] = (sub_buffer & mask)+1;
+
+        /* SUPERCOP edit: tell TIMECOP to ignore non-constant-time behavior in rejection sampling. */
+        crypto_declassify(&res[placed], sizeof(FP_ELEM));
+
         if (res[placed] < P) {
            placed++;
         }
@@ -364,6 +362,11 @@
             pos_remaining -= refresh_amount;
         }
         *((FP_ELEM*)res+placed) = sub_buffer & mask;
+
+        /* SUPERCOP edit: tell TIMECOP to ignore non-constant-time behavior in rejection sampling. */
+        FP_ELEM *target = ((FP_ELEM*)res + placed);
+        crypto_declassify(target, sizeof(FP_ELEM));
+
         if (*((FP_ELEM*)res+placed) < P) {
            placed++;
         }
@@ -407,6 +410,10 @@
             pos_remaining -= refresh_amount;
         }
         res[placed] = sub_buffer & mask;
+
+        /* SUPERCOP edit: tell TIMECOP to ignore non-constant-time behavior in rejection sampling. */
+        crypto_declassify(&res[placed], sizeof(FZ_ELEM));
+
         if (res[placed] < Z) {
            placed++;
         }
@@ -449,6 +456,10 @@
             pos_remaining -= refresh_amount;
         }
         res[placed] = sub_buffer & mask;
+
+        /* SUPERCOP edit: tell TIMECOP to ignore non-constant-time behavior in rejection sampling. */
+        crypto_declassify(&res[placed], sizeof(FZ_ELEM));
+
         if (res[placed] < Z) {
            placed++;
         }
@@ -492,6 +503,11 @@
             pos_remaining -= refresh_amount;
         }
         *((FZ_ELEM*)res+placed) = sub_buffer & mask;
+
+        /* SUPERCOP edit: tell TIMECOP to ignore non-constant-time behavior in rejection sampling. */
+        FZ_ELEM *target = ((FZ_ELEM*)res + placed);
+        crypto_declassify(target, sizeof(FZ_ELEM));
+
         if (*((FZ_ELEM*)res+placed) < Z) {
            placed++;
         }
diff -ruaN unzip/Optimized_Implementation/lib/CROSS.c tmp/Optimized_Implementation/lib/CROSS.c
--- unzip/Optimized_Implementation/lib/CROSS.c	2025-03-15 11:38:28.743967889 +0100
+++ tmp/Optimized_Implementation/lib/CROSS.c	2025-03-15 11:38:05.719569546 +0100
@@ -38,6 +38,7 @@
 #include "fp_arith.h"
 #include "merkle_tree.h"
 #include "pack_unpack.h"
+#include "randombytes.h"
 #include "seedtree.h"
 
 #if defined(RSDP)
diff -ruaN unzip/Reference_Implementation/include/csprng_hash.h tmp/Reference_Implementation/include/csprng_hash.h
--- unzip/Reference_Implementation/include/csprng_hash.h	2025-03-15 11:38:28.743967889 +0100
+++ tmp/Reference_Implementation/include/csprng_hash.h	2025-03-15 11:38:05.719569546 +0100
@@ -34,6 +34,7 @@
 #ifndef CSPRNG_HASH_H
 #define CSPRNG_HASH_H
 
+#include "crypto_declassify.h"
 #include "parameters.h"
 #include "sha3.h"
 
@@ -64,17 +65,6 @@
    xof_shake_extract(csprng_state,x,xlen);
 }
 
-/******************************************************************************/
-
-/* global csprng state employed to have deterministic randombytes for testing */
-extern CSPRNG_STATE_T platform_csprng_state;
-/* extracts xlen bytes from the global CSPRNG */
-static inline
-void randombytes(unsigned char * x,
-                 unsigned long long xlen) {
-   csprng_randombytes(x,xlen,&platform_csprng_state);
-}
-
 /************************* HASH functions ********************************/
 
 /* Opaque algorithm agnostic hash call */
@@ -138,6 +128,10 @@
             pos_remaining -= refresh_amount;
         }
         res[placed] = sub_buffer & mask;
+
+        /* SUPERCOP edit: tell TIMECOP to ignore non-constant-time behavior in rejection sampling. */
+        crypto_declassify(&res[placed], sizeof(FP_ELEM));
+
         if (res[placed] < P) {
            placed++;
         }
@@ -183,6 +177,10 @@
         }
         /* draw from 0 ... P-2, then add 1*/
         res[placed] = (sub_buffer & mask)+1;
+
+        /* SUPERCOP edit: tell TIMECOP to ignore non-constant-time behavior in rejection sampling. */
+        crypto_declassify(&res[placed], sizeof(FP_ELEM));
+
         if (res[placed] < P) {
            placed++;
         }
@@ -225,6 +223,11 @@
             pos_remaining -= refresh_amount;
         }
         *((FP_ELEM*)res+placed) = sub_buffer & mask;
+
+        /* SUPERCOP edit: tell TIMECOP to ignore non-constant-time behavior in rejection sampling. */
+        FP_ELEM *target = ((FP_ELEM*)res + placed);
+        crypto_declassify(target, sizeof(FP_ELEM));
+
         if (*((FP_ELEM*)res+placed) < P) {
            placed++;
         }
@@ -268,6 +271,10 @@
             pos_remaining -= refresh_amount;
         }
         res[placed] = sub_buffer & mask;
+
+        /* SUPERCOP edit: tell TIMECOP to ignore non-constant-time behavior in rejection sampling. */
+        crypto_declassify(&res[placed], sizeof(FZ_ELEM));
+
         if (res[placed] < Z) {
            placed++;
         }
@@ -310,6 +317,10 @@
             pos_remaining -= refresh_amount;
         }
         res[placed] = sub_buffer & mask;
+
+        /* SUPERCOP edit: tell TIMECOP to ignore non-constant-time behavior in rejection sampling. */
+        crypto_declassify(&res[placed], sizeof(FZ_ELEM));
+
         if (res[placed] < Z) {
            placed++;
         }
@@ -353,6 +364,11 @@
             pos_remaining -= refresh_amount;
         }
         *((FZ_ELEM*)res+placed) = sub_buffer & mask;
+
+        /* SUPERCOP edit: tell TIMECOP to ignore non-constant-time behavior in rejection sampling. */
+        FZ_ELEM *target = ((FZ_ELEM*)res + placed);
+        crypto_declassify(target, sizeof(FZ_ELEM));
+
         if (*((FZ_ELEM*)res+placed) < Z) {
            placed++;
         }
diff -ruaN unzip/Reference_Implementation/lib/CROSS.c tmp/Reference_Implementation/lib/CROSS.c
--- unzip/Reference_Implementation/lib/CROSS.c	2025-03-15 11:38:28.747967956 +0100
+++ tmp/Reference_Implementation/lib/CROSS.c	2025-03-15 11:38:05.719569546 +0100
@@ -38,6 +38,7 @@
 #include "fp_arith.h"
 #include "merkle_tree.h"
 #include "pack_unpack.h"
+#include "randombytes.h"
 #include "seedtree.h"
 
 #if defined(RSDP)
diff -ruaN unzip/Reference_Implementation/lib/csprng_hash.c tmp/Reference_Implementation/lib/csprng_hash.c
--- unzip/Reference_Implementation/lib/csprng_hash.c	2025-03-15 11:38:28.747967956 +0100
+++ tmp/Reference_Implementation/lib/csprng_hash.c	2025-03-15 11:38:05.719569546 +0100
@@ -33,8 +33,6 @@
 
 #include "csprng_hash.h"
 
-CSPRNG_STATE_T platform_csprng_state;
-
 #define  POSITION_MASK (( (uint16_t)1 << BITS_TO_REPRESENT(T-1))-1)
 
 /* Fisher-Yates shuffle obtaining the entire required randomness in a single 
@@ -81,6 +79,10 @@
         int bits_for_pos = BITS_TO_REPRESENT(T-1-curr);
         uint64_t pos_mask = ( (uint64_t) 1 <<  bits_for_pos) - 1;
         uint16_t candidate_pos = (sub_buffer & pos_mask);
+
+        /* SUPERCOP edit: tell TIMECOP to ignore non-constant-time behavior in rejection sampling. */
+        crypto_declassify(&candidate_pos, sizeof(uint16_t));
+
         if (candidate_pos < T-curr) {
             int dest = curr+candidate_pos;
             /* the position is admissible, swap */
diff -ruaN unzip/Reference_Implementation/lib/pack_unpack.c tmp/Reference_Implementation/lib/pack_unpack.c
--- unzip/Reference_Implementation/lib/pack_unpack.c	2025-03-15 11:38:28.747967956 +0100
+++ tmp/Reference_Implementation/lib/pack_unpack.c	2025-03-15 11:38:59.120464572 +0100
@@ -36,6 +36,8 @@
 
 /*Implementation of packing and unpacking of 3/7/9 bit elements into byte vectors*/
 
+/* SUPERCOP edit: generic_pack_3_bit is unused in RSDPG */
+#if Z == 7
 /*
  * generic_pack_3_bit()
  *
@@ -99,6 +101,7 @@
     out[i*3+2]  = (in[i*8+5] >> 1) | (in[i*8+6] << 2);
   }
 }
+#endif
 
 /*
  * generic_pack_7_bit()
@@ -182,6 +185,8 @@
   }
 }
 
+/* SUPERCOP edit: generic_pack_9_bit is unused in RSDP */
+#if P == 509
 /*
  * generic_pack_9_bit()
  *
@@ -272,6 +277,7 @@
     out[i*9+7] |= (in[i*8+6] >> 2);
   }
 }
+#endif
 
 /*
  * generic_pack_fp()
@@ -324,6 +330,8 @@
 #endif
 }
 
+/* SUPERCOP edit: generic_unpack_3_bit is unused in RSDPG */
+#if Z == 7
 /*
  * generic_unpack_3_bit()
  *
@@ -413,6 +421,7 @@
 
   return is_packed_padd_ok;
 }
+#endif
 
 /*
  * generic_unpack_7_bit()
@@ -504,6 +513,8 @@
   return is_packed_padd_ok;
 }
 
+/* SUPERCOP edit: generic_unpack_9_bit is unused in RSDP */
+#if P == 509
 /*
  * generic_unpack_9_bit()
  *
@@ -593,6 +604,7 @@
 
   return is_packed_padd_ok;
 }
+#endif
 
 /*
  * generic_unpack_fp()
diff -ruaN unzip/Reference_Implementation/lib/sign.c tmp/Reference_Implementation/lib/sign.c
--- unzip/Reference_Implementation/lib/sign.c	2025-03-15 11:38:28.747967956 +0100
+++ tmp/Reference_Implementation/lib/sign.c	2025-03-15 11:38:05.719569546 +0100
@@ -77,14 +77,18 @@
                      unsigned long long *mlen,                  // out parameter
                      const unsigned char *sm,                   // in parameter
                      unsigned long long smlen,                  // in parameter
-                     const unsigned char *pk)                   // in parameter
+                     const unsigned char *pk_static)            // in parameter
 {
 
+   /* SUPERCOP edit: make a static copy of the public key */
+   const pk_t pk;
+   memcpy((unsigned char *) &pk, pk_static, sizeof(pk_t));
+
    /* verify returns 1 if signature is ok, 0 otherwise */
    *mlen = smlen-(unsigned long long) sizeof(CROSS_sig_t);
    
    memcpy((unsigned char *) m, (const unsigned char *) sm, (size_t) *mlen);
-   int ok = CROSS_verify((const pk_t *const) pk,            // in parameter
+   int ok = CROSS_verify(&pk,                                   // in parameter
                         (const char *const) m,                  // in parameter
                         (const uint64_t) *mlen,                 // in parameter
                         (const CROSS_sig_t * const) (sm+*mlen));// in parameter
