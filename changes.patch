diff -ruaN unzip/Optimized_Implementation/include/csprng_hash.h tmp/Optimized_Implementation/include/csprng_hash.h
--- unzip/Optimized_Implementation/include/csprng_hash.h	2025-02-24 14:21:56.908278804 +0100
+++ tmp/Optimized_Implementation/include/csprng_hash.h	2025-02-24 14:08:55.388808964 +0100
@@ -180,17 +180,6 @@
    else if(par_level == 4) csprng_randombytes_x4(x1, x2, x3, x4, xlen, &(states->state4));
 }
 
-/******************************************************************************/
-
-/* global csprng state employed to have deterministic randombytes for testing */
-extern CSPRNG_STATE_T platform_csprng_state;
-/* extracts xlen bytes from the global CSPRNG */
-static inline
-void randombytes(unsigned char * x,
-                 unsigned long long xlen) {
-   csprng_randombytes(x,xlen,&platform_csprng_state);
-}
-
 /************************* HASH functions ********************************/
 
 /* Opaque algorithm agnostic hash call */
diff -ruaN unzip/Optimized_Implementation/lib/CROSS.c tmp/Optimized_Implementation/lib/CROSS.c
--- unzip/Optimized_Implementation/lib/CROSS.c	2025-02-24 14:21:56.908278804 +0100
+++ tmp/Optimized_Implementation/lib/CROSS.c	2025-02-24 14:10:32.585252338 +0100
@@ -38,6 +38,7 @@
 #include "fp_arith.h"
 #include "merkle_tree.h"
 #include "pack_unpack.h"
+#include "randombytes.h"
 #include "seedtree.h"
 
 #if defined(RSDP)
diff -ruaN unzip/Reference_Implementation/include/csprng_hash.h tmp/Reference_Implementation/include/csprng_hash.h
--- unzip/Reference_Implementation/include/csprng_hash.h	2025-02-24 14:21:56.908278804 +0100
+++ tmp/Reference_Implementation/include/csprng_hash.h	2025-02-24 14:09:04.804464249 +0100
@@ -64,17 +64,6 @@
    xof_shake_extract(csprng_state,x,xlen);
 }
 
-/******************************************************************************/
-
-/* global csprng state employed to have deterministic randombytes for testing */
-extern CSPRNG_STATE_T platform_csprng_state;
-/* extracts xlen bytes from the global CSPRNG */
-static inline
-void randombytes(unsigned char * x,
-                 unsigned long long xlen) {
-   csprng_randombytes(x,xlen,&platform_csprng_state);
-}
-
 /************************* HASH functions ********************************/
 
 /* Opaque algorithm agnostic hash call */
diff -ruaN unzip/Reference_Implementation/lib/CROSS.c tmp/Reference_Implementation/lib/CROSS.c
--- unzip/Reference_Implementation/lib/CROSS.c	2025-02-24 14:21:56.912278658 +0100
+++ tmp/Reference_Implementation/lib/CROSS.c	2025-02-24 14:10:40.888948646 +0100
@@ -38,6 +38,7 @@
 #include "fp_arith.h"
 #include "merkle_tree.h"
 #include "pack_unpack.h"
+#include "randombytes.h"
 #include "seedtree.h"
 
 #if defined(RSDP)
diff -ruaN unzip/Reference_Implementation/lib/sign.c tmp/Reference_Implementation/lib/sign.c
--- unzip/Reference_Implementation/lib/sign.c	2025-02-24 14:21:56.908278804 +0100
+++ tmp/Reference_Implementation/lib/sign.c	2025-02-24 14:10:15.961860376 +0100
@@ -77,14 +77,18 @@
                      unsigned long long *mlen,                  // out parameter
                      const unsigned char *sm,                   // in parameter
                      unsigned long long smlen,                  // in parameter
-                     const unsigned char *pk)                   // in parameter
+                     const unsigned char *pk_static)            // in parameter
 {
 
+   /* SUPERCOP edit: make a static copy of the public key */
+   const pk_t pk;
+   memcpy((unsigned char *) &pk, pk_static, sizeof(pk_t));
+
    /* verify returns 1 if signature is ok, 0 otherwise */
    *mlen = smlen-(unsigned long long) sizeof(CROSS_sig_t);
    
    memcpy((unsigned char *) m, (const unsigned char *) sm, (size_t) *mlen);
-   int ok = CROSS_verify((const pk_t *const) pk,            // in parameter
+   int ok = CROSS_verify(&pk,                                   // in parameter
                         (const char *const) m,                  // in parameter
                         (const uint64_t) *mlen,                 // in parameter
                         (const CROSS_sig_t * const) (sm+*mlen));// in parameter
